<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting started with Camunda Platform</title>
    <link>/7docs/7docs/get-started/</link>
    <description>Recent content on Getting started with Camunda Platform</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="/7docs/7docs/get-started/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Download and Installation</title>
      <link>/7docs/7docs/get-started/archive/java-process-app/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/java-process-app/install/</guid>
      <description>&lt;p&gt;First you need to set up your development environment and install the Camunda Platform and the Camunda Modeler.&lt;/p&gt;&#xA;&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;&#xA;&lt;p&gt;Make sure you have the following set of tools installed:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java JDK 1.8+,&lt;/li&gt;&#xA;&lt;li&gt;Apache Maven (optional, if not installed you can use embedded Maven inside Eclipse.)&lt;/li&gt;&#xA;&lt;li&gt;A modern web browser (recent Firefox, Chrome or Microsoft Edge will work fine)&lt;/li&gt;&#xA;&lt;li&gt;Eclipse integrated development environment (IDE)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;camunda-platform&#34;&gt;Camunda Platform&lt;/h1&gt;&#xA;&lt;p&gt;First, download a distribution of the Camunda Platform. You can choose from different distributions for various application servers. In this tutorial, we will use the Apache Tomcat based distribution. Download it from &lt;a href=&#34;https://camunda.com/download#download-other-menu&#34;&gt;the download page&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Download and Installation</title>
      <link>/7docs/7docs/get-started/archive/javaee7/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/javaee7/install/</guid>
      <description>&lt;p&gt;First you need to set up your development environment and install the Camunda Platform and the Camunda Modeler.&lt;/p&gt;&#xA;&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;&#xA;&lt;p&gt;Make sure you have the following set of tools installed:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java JDK 1.8+&lt;/li&gt;&#xA;&lt;li&gt;Apache Maven (optional, if not installed you can use embedded Maven inside Eclipse.)&lt;/li&gt;&#xA;&lt;li&gt;A modern web browser (recent Firefox, Chrome or Microsoft Edge will work fine)&lt;/li&gt;&#xA;&lt;li&gt;Eclipse integrated development environment (IDE)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;install-camunda-platform&#34;&gt;Install Camunda Platform&lt;/h1&gt;&#xA;&lt;p&gt;First, download a distribution of the Camunda Platform. You can choose from different application servers. In this tutorial, we will use a WildFly-based distribution. Download it from &lt;a href=&#34;https://downloads.camunda.cloud/release/camunda-bpm/wildfly/&#34;&gt;the download page&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Download and Installation</title>
      <link>/7docs/7docs/get-started/dmn/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/dmn/install/</guid>
      <description>&lt;p&gt;First you need to set up your development environment and install the Camunda Platform and the Camunda Modeler.&lt;/p&gt;&#xA;&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;&#xA;&lt;p&gt;Make sure you have the following set of tools installed:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java JDK 11+,&lt;/li&gt;&#xA;&lt;li&gt;Apache Maven (optional, if not installed you can use embedded Maven inside Eclipse.)&lt;/li&gt;&#xA;&lt;li&gt;A modern web browser (recent Firefox, Chrome or Microsoft Edge will work fine)&lt;/li&gt;&#xA;&lt;li&gt;Eclipse integrated development environment (IDE)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;camunda-platform&#34;&gt;Camunda Platform&lt;/h1&gt;&#xA;&lt;p&gt;First, download a distribution of the Camunda Platform. You can choose from different distributions for various application servers. In this tutorial, we will use the Apache Tomcat based distribution. Download it from &lt;a href=&#34;https://camunda.com/download/&#34;&gt;the download page&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Download and Installation (1/6)</title>
      <link>/7docs/7docs/get-started/quick-start/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/quick-start/install/</guid>
      <description>&lt;p&gt;First, you need to install the Camunda Platform and the Camunda Modeler.&lt;/p&gt;&#xA;&lt;p&gt;In the following section, we&amp;rsquo;ll describe how to install the Camunda Platform locally on your machine.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;note bg-info docs-info&#34;&gt;&#xA;  &lt;h3&gt;Hint&lt;/h3&gt;&#xA;  &lt;p&gt;&lt;p&gt;If you prefer, you can also run the Camunda Platform with Docker:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker pull camunda/camunda-bpm-platform:run-latest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --name camunda -p 8080:8080 camunda/camunda-bpm-platform:run-latest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Afterwards, you can &lt;a href=&#34;#camunda-modeler&#34;&gt;install the Camunda Modeler&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;&#xA;&lt;p&gt;Please make sure you have the following installed:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java Runtime Environment 11&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;You can verify this by using your terminal, shell, or command line:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Requirements</title>
      <link>/7docs/7docs/get-started/archive/rpa/requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/rpa/requirements/</guid>
      <description>&lt;p&gt;Several components are involved in setting up proper RPA Orchestration in this guide.&#xA;Therefore, a couple of requirements should be fulfilled before starting with this guide.&#xA;You can also jump ahead to the &lt;a href=&#34;../installation&#34;&gt;Installation &amp;amp; Configuration&lt;/a&gt; page if you are familiar&#xA;with the requirements already.&lt;/p&gt;&#xA;&lt;h1 id=&#34;knowledge-requirements&#34;&gt;Knowledge Requirements&lt;/h1&gt;&#xA;&lt;p&gt;In order to succeed with this getting started guide, we expect that you already know&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How to create and trigger robots with your RPA vendor (UiPath or AutomationAnywhere)&lt;/li&gt;&#xA;&lt;li&gt;How to model and execute BPMN process diagrams with the Camunda stack&lt;/li&gt;&#xA;&lt;li&gt;How to work with process variables as part of JUEL expressions&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If you never executed a process model with the Camunda engine, we recommend starting with the &lt;a href=&#34;../../quick-start&#34;&gt;Quick Start Guide&lt;/a&gt; first.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup a Spring Boot Project</title>
      <link>/7docs/7docs/get-started/spring-boot/project-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/spring-boot/project-setup/</guid>
      <description>&lt;p&gt;First, let&amp;rsquo;s set up your first process application project in the IDE of your choice, the following description uses Eclipse.&lt;/p&gt;&#xA;&lt;h1 id=&#34;requirements&#34;&gt;Requirements&lt;/h1&gt;&#xA;&lt;p&gt;The project requires Java 17/21.&lt;/p&gt;&#xA;&lt;h1 id=&#34;set-up-a-java-project&#34;&gt;Set Up a Java Project&lt;/h1&gt;&#xA;&lt;p&gt;We will start by setting up a Spring Boot application as an Apache Maven Project inside Eclipse. This consists of three steps:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Create a new Maven Project in Eclipse&lt;/li&gt;&#xA;&lt;li&gt;Add the Camunda &amp;amp; Spring Boot dependencies&lt;/li&gt;&#xA;&lt;li&gt;Add a main class as an entry point for launching the Spring Boot application.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;In the following sections, we go through this process step by step.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup a Spring Web Application Project</title>
      <link>/7docs/7docs/get-started/archive/spring/project-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/spring/project-setup/</guid>
      <description>&lt;p&gt;Now you are ready to set up your first process application project in Eclipse or the IDE of your choice, the following description uses Eclipse.&lt;/p&gt;&#xA;&lt;h1 id=&#34;set-up-a-java-project&#34;&gt;Set Up a Java Project&lt;/h1&gt;&#xA;&lt;p&gt;We will start by setting up a Spring web application as an Apache Maven Project inside Eclipse. This consists of four steps:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Create a new Maven Project in Eclipse&lt;/li&gt;&#xA;&lt;li&gt;Add the Camunda &amp;amp; Spring framework dependencies&lt;/li&gt;&#xA;&lt;li&gt;Add the web.xml file for bootstrapping the Spring container&lt;/li&gt;&#xA;&lt;li&gt;Add a Spring Java configuration to set up the application context&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;In the following sections, we go through this process step by step.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache Maven Coordinates</title>
      <link>/7docs/7docs/get-started/apache-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/apache-maven/</guid>
      <description>&lt;p&gt;This page lists the most commonly used Apache Maven Coordinates for Camunda.&lt;/p&gt;&#xA;&lt;p&gt;Most Camunda artifacts are pushed to &lt;a href=&#34;https://central.sonatype.com/&#34;&gt;maven central&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;camunda-bom-bill-of-materials&#34;&gt;Camunda BOM (Bill of Materials)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;community-edition&#34;&gt;Community Edition&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.camunda.bpm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;camunda-bom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;7.22.0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;enterprise-edition&#34;&gt;Enterprise Edition&lt;/h2&gt;&#xA;&lt;p&gt;To use the Enterprise Edition dependencies, you have to add the &lt;a href=&#34;#enterprise-edition-1&#34;&gt;Enterprise Edition Maven Repository&lt;/a&gt; to your project.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.camunda.bpm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;camunda-bom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;7.22.0-ee&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;div class=&#34;note bg-info docs-info&#34;&gt;&#xA;  &lt;h3&gt;Use the BOM!&lt;/h3&gt;&#xA;  &lt;p&gt;Please import the Camunda BOM if you use multiple Camunda projects. The BOM defines versions for all Camunda projects. This way it is ensured that no incompatible versions are imported.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configure a Spring Boot Project</title>
      <link>/7docs/7docs/get-started/spring-boot/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/spring-boot/configuration/</guid>
      <description>&lt;p&gt;The Camunda Spring Boot Application created in previous step uses the default and best practice configuration, embedded in a starter.&#xA;There are several ways to customize or override the configuration. The easiest is to provide a set of parameters in the &lt;code&gt;application.yaml&lt;/code&gt; (or &lt;code&gt;application.properties&lt;/code&gt;) file.&#xA;The full list of supported configuration parameters can be found &lt;a href=&#34;/7docs/7docs/get-started/manual/latest/user-guide/spring-boot-integration/configuration/#camunda-engine-properties&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;customize-configuration&#34;&gt;Customize Configuration&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s create an &lt;code&gt;application.yaml&lt;/code&gt; file in the &lt;code&gt;src/main/resources&lt;/code&gt; folder with the following content:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Embedded Process Engine Configuration</title>
      <link>/7docs/7docs/get-started/archive/spring/embedded-process-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/spring/embedded-process-engine/</guid>
      <description>&lt;p&gt;Now that you have set up the project with the correct Maven dependencies, we can start configuring the process engine.&lt;/p&gt;&#xA;&lt;h1 id=&#34;configure-an-embedded-process-engine&#34;&gt;Configure an Embedded Process Engine&lt;/h1&gt;&#xA;&lt;p&gt;Add the following Spring beans to the &lt;code&gt;LoanApplication&lt;/code&gt; class as follows:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; org.camunda.bpm.getstarted.loanapproval;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; javax.sql.DataSource;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.camunda.bpm.engine.HistoryService;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.camunda.bpm.engine.ManagementService;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.camunda.bpm.engine.ProcessEngine;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.camunda.bpm.engine.RepositoryService;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.camunda.bpm.engine.RuntimeService;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.camunda.bpm.engine.TaskService;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.camunda.bpm.engine.spring.ProcessEngineFactoryBean;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.jdbc.datasource.DataSourceTransactionManager;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.jdbc.datasource.DriverManagerDataSource;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.transaction.PlatformTransactionManager;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoanApplicationContext&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DataSource &lt;span style=&#34;color:#a6e22e&#34;&gt;dataSource&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DriverManagerDataSource dataSource &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DriverManagerDataSource();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dataSource.&lt;span style=&#34;color:#a6e22e&#34;&gt;setDriverClassName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.h2.Driver&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dataSource.&lt;span style=&#34;color:#a6e22e&#34;&gt;setUrl&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jdbc:h2:mem:process-engine;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dataSource.&lt;span style=&#34;color:#a6e22e&#34;&gt;setUsername&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sa&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dataSource.&lt;span style=&#34;color:#a6e22e&#34;&gt;setPassword&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dataSource;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PlatformTransactionManager &lt;span style=&#34;color:#a6e22e&#34;&gt;transactionManager&lt;/span&gt;(DataSource dataSource) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataSourceTransactionManager(dataSource);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SpringProcessEngineConfiguration &lt;span style=&#34;color:#a6e22e&#34;&gt;engineConfiguration&lt;/span&gt;(DataSource dataSource, PlatformTransactionManager transactionManager) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SpringProcessEngineConfiguration configuration &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SpringProcessEngineConfiguration();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    configuration.&lt;span style=&#34;color:#a6e22e&#34;&gt;setProcessEngineName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;engine&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    configuration.&lt;span style=&#34;color:#a6e22e&#34;&gt;setDataSource&lt;/span&gt;(dataSource);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    configuration.&lt;span style=&#34;color:#a6e22e&#34;&gt;setTransactionManager&lt;/span&gt;(transactionManager);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    configuration.&lt;span style=&#34;color:#a6e22e&#34;&gt;setDatabaseSchemaUpdate&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    configuration.&lt;span style=&#34;color:#a6e22e&#34;&gt;setJobExecutorActivate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; configuration;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ProcessEngineFactoryBean &lt;span style=&#34;color:#a6e22e&#34;&gt;engineFactory&lt;/span&gt;(SpringProcessEngineConfiguration engineConfiguration) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ProcessEngineFactoryBean factoryBean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProcessEngineFactoryBean();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    factoryBean.&lt;span style=&#34;color:#a6e22e&#34;&gt;setProcessEngineConfiguration&lt;/span&gt;(engineConfiguration);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; factoryBean;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ProcessEngine &lt;span style=&#34;color:#a6e22e&#34;&gt;processEngine&lt;/span&gt;(ProcessEngineFactoryBean factoryBean) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; factoryBean.&lt;span style=&#34;color:#a6e22e&#34;&gt;getObject&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; RepositoryService &lt;span style=&#34;color:#a6e22e&#34;&gt;repositoryService&lt;/span&gt;(ProcessEngine processEngine) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; processEngine.&lt;span style=&#34;color:#a6e22e&#34;&gt;getRepositoryService&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; RuntimeService &lt;span style=&#34;color:#a6e22e&#34;&gt;runtimeService&lt;/span&gt;(ProcessEngine processEngine) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; processEngine.&lt;span style=&#34;color:#a6e22e&#34;&gt;getRuntimeService&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TaskService &lt;span style=&#34;color:#a6e22e&#34;&gt;taskService&lt;/span&gt;(ProcessEngine processEngine) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; processEngine.&lt;span style=&#34;color:#a6e22e&#34;&gt;getTaskService&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; HistoryService &lt;span style=&#34;color:#a6e22e&#34;&gt;historyService&lt;/span&gt;(ProcessEngine processEngine) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; processEngine.&lt;span style=&#34;color:#a6e22e&#34;&gt;getHistoryService&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ManagementService &lt;span style=&#34;color:#a6e22e&#34;&gt;managementService&lt;/span&gt;(ProcessEngine processEngine) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; processEngine.&lt;span style=&#34;color:#a6e22e&#34;&gt;getManagementService&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This bootstraps a process engine with an in-memory H2 database and makes the engine as well as its API services available as Spring beans.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Executing automated steps (2/6)</title>
      <link>/7docs/7docs/get-started/quick-start/service-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/quick-start/service-task/</guid>
      <description>&lt;p&gt;In this section, you&amp;rsquo;ll learn how to create your first BPMN 2.0 process with the Camunda Modeler and how to execute automated steps. Start by opening up Camunda Modeler.&lt;/p&gt;&#xA;&lt;h1 id=&#34;create-a-new-bpmn-diagram&#34;&gt;Create a new BPMN Diagram&lt;/h1&gt;&#xA;&lt;p&gt;Create a new BPMN diagram by clicking &lt;em&gt;File &amp;gt; New File &amp;gt; BPMN Diagram (Camunda Platform)&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/modeler-new-bpmn-diagram.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;start-with-a-simple-process&#34;&gt;Start with a Simple Process&lt;/h2&gt;&#xA;&lt;p&gt;Start by modeling a simple process.&lt;/p&gt;&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/modeler-step1.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Double-click on the Start Event. A text box will open. Name the Start Event &amp;ldquo;Payment Retrieval Requested&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installation &amp; Configuration</title>
      <link>/7docs/7docs/get-started/archive/rpa/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/rpa/installation/</guid>
      <description>&lt;p&gt;After familiarizing yourself with all &lt;a href=&#34;../requirements&#34;&gt;Requirements&lt;/a&gt;, this section will dive deeper into the components involved in RPA Orchestration and how you should set them up. If your setup is already prepared, jump ahead to &lt;a href=&#34;../orchestrating-bots&#34;&gt;Orchestrating RPA Bots&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;rpa-vendor-credentials&#34;&gt;RPA Vendor Credentials&lt;/h1&gt;&#xA;&lt;p&gt;To orchestrate RPA bots, we will connect the Camunda Platform Workflow Engine to your RPA vendor via the Camunda RPA Bridge.&#xA;This component will require configuration parameters to connect to your RPA vendor.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup a Java EE Application Project</title>
      <link>/7docs/7docs/get-started/archive/javaee7/project-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/javaee7/project-setup/</guid>
      <description>&lt;p&gt;Now you are ready to set up your first process application project in the IDE of your choice, the following description uses Eclipse.&lt;/p&gt;&#xA;&lt;h1 id=&#34;set-up-your-project&#34;&gt;Set up your project&lt;/h1&gt;&#xA;&#xA;&lt;div class=&#34;note bg-info docs-info&#34;&gt;&#xA;  &lt;h3&gt;Fancy to save work and use a project template instead?&lt;/h3&gt;&#xA;  &lt;p&gt;You don&amp;rsquo;t have to setup the project manually but can also use a Maven Archetype (which is like a project template), see &lt;a href=&#34;/7docs/7docs/get-started/manual/latest/user-guide/process-applications/maven-archetypes/&#34;&gt;Maven Archetypes&lt;/a&gt; for details. The archetype will create a project according to our best practices.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup a Java Project for BPMN 2.0</title>
      <link>/7docs/7docs/get-started/archive/java-process-app/project-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/java-process-app/project-setup/</guid>
      <description>&lt;p&gt;Now you are ready to set up your first process application project in the IDE of your choice, the following description uses Eclipse.&lt;/p&gt;&#xA;&lt;h1 id=&#34;create-a-new-maven-project&#34;&gt;Create a new Maven Project&lt;/h1&gt;&#xA;&#xA;&lt;div class=&#34;note bg-info docs-info&#34;&gt;&#xA;  &lt;h3&gt;Fancy to save work and use a project template instead?&lt;/h3&gt;&#xA;  &lt;p&gt;You don&amp;rsquo;t have to setup the project manually but can also use a Maven Archetype (which is like a project template), see &lt;a href=&#34;/7docs/7docs/get-started/manual/latest/user-guide/process-applications/maven-archetypes/&#34;&gt;Maven Archetypes&lt;/a&gt; for details. The archetype will create a project according to our best practices.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup a Java Project for DMN</title>
      <link>/7docs/7docs/get-started/dmn/project-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/dmn/project-setup/</guid>
      <description>&lt;p&gt;Now you are ready to set up your first process application project in the IDE of your choice, the following description uses Eclipse.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;note bg-info docs-info&#34;&gt;&#xA;  &lt;h3&gt;Terminology - Process vs. Decisions&lt;/h3&gt;&#xA;  &lt;p&gt;DMN is a modeling language for &lt;em&gt;decisions&lt;/em&gt;, whereas BPMN is a language for &lt;em&gt;processes&lt;/em&gt;. This tutorial is about decisions. However, due to Camunda&amp;rsquo;s BPMN-focused heritage, the Java project contains classes and files with names like &lt;code&gt;ProcessApplication&lt;/code&gt; and &lt;code&gt;processes.xml&lt;/code&gt;. These are in fact generally applicable and can be used with both processes and decisions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Create a DMN Decision Table</title>
      <link>/7docs/7docs/get-started/dmn/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/dmn/model/</guid>
      <description>&lt;p&gt;In this section you learn how to create your first &lt;a href=&#34;/7docs/7docs/get-started/manual/latest/reference/dmn11/decision-table/&#34;&gt;DMN Decision Table&lt;/a&gt; with the Camunda Modeler. The table will contain the decision logic about the desired dish for a given season and guest count.&lt;/p&gt;&#xA;&lt;p&gt;Now start up the Camunda Modeler.&lt;/p&gt;&#xA;&lt;h1 id=&#34;create-a-new-decision-diagram&#34;&gt;Create a new Decision Diagram&lt;/h1&gt;&#xA;&lt;p&gt;Create a new DMN diagram by clicking &lt;em&gt;File &amp;gt; New File &amp;gt; DMN Diagram&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/modeler-new-dmn-table.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h1 id=&#34;start-with-the-table-header&#34;&gt;Start with the Table Header&lt;/h1&gt;&#xA;&lt;p&gt;Start by setting the name and the id of the decision. Select the decision, open the Properties Panel on the right side and change the text to &amp;ldquo;dish&amp;rdquo; as the technical &lt;a href=&#34;/7docs/7docs/get-started/manual/latest/reference/dmn11/decision-table/#decision-id&#34;&gt;id of the decision&lt;/a&gt; which is used to reference the decision inside the process application.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploy the Process (3/6)</title>
      <link>/7docs/7docs/get-started/quick-start/deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/quick-start/deploy/</guid>
      <description>&lt;p&gt;In the next step, you&amp;rsquo;ll deploy the Process and start a new instance so you can see that your simple process is working correctly.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;note bg-info docs-info&#34;&gt;&#xA;  &lt;h3&gt;Deployment Support&lt;/h3&gt;&#xA;  &lt;p&gt;BPMN diagrams must be created for the process engine they intend to be deployed on. You cannot run a BPMN diagram modeled for Camunda Platform in Camunda Cloud, or vice versa, at this time.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;use-the-camunda-modeler-to-deploy-the-process&#34;&gt;Use the Camunda Modeler to Deploy the Process&lt;/h1&gt;&#xA;&lt;p&gt;In order to deploy the Process, click on the deploy button in the Camunda Modeler, then give it the Deployment Name &amp;ldquo;Payment Retrieval&amp;rdquo; and click the Deploy button. From version 3.0.0 on, you will be required to provide an URL for an Endpoint Configuration along with Deployment Details. This can be either the root endpoint to the REST API (e.g. &lt;code&gt;http://localhost:8080/engine-rest&lt;/code&gt;) or an exact endpoint to the deployment creation method (e.g. &lt;code&gt;http://localhost:8080/engine-rest/deployment/create&lt;/code&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Invoking a Spring Bean from a BPMN 2.0 Service Task</title>
      <link>/7docs/7docs/get-started/archive/spring/service-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/spring/service-task/</guid>
      <description>&lt;p&gt;In this section we learn how to start a process from a Spring Bean and how to invoke a Spring Bean from a BPMN 2.0 Service Task.&lt;/p&gt;&#xA;&lt;h1 id=&#34;add-a-spring-bean-service-task&#34;&gt;Add a Spring Bean Service Task&lt;/h1&gt;&#xA;&lt;p&gt;Now that we know how to bootstrap the process engine in a Spring Application context, we can add a BPMN 2.0 process&#xA;model and interact with the process form inside our Spring beans. In this section we will&lt;/p&gt;</description>
    </item>
    <item>
      <title>Modeling a BPMN 2.0 Process</title>
      <link>/7docs/7docs/get-started/archive/java-process-app/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/java-process-app/model/</guid>
      <description>&lt;p&gt;In this section you learn how to create your first BPMN 2.0 process with the Camunda Modeler. Start up the Camunda Modeler now.&lt;/p&gt;&#xA;&lt;h1 id=&#34;create-a-new-bpmn-diagram&#34;&gt;Create a new BPMN Diagram&lt;/h1&gt;&#xA;&lt;p&gt;Create a new BPMN diagram by clicking &lt;em&gt;File &amp;gt; New File &amp;gt; BPMN Diagram&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/modeler-new-bpmn-diagram.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h1 id=&#34;start-with-a-simple-process&#34;&gt;Start with a Simple Process&lt;/h1&gt;&#xA;&lt;p&gt;Start by modeling a simple process.&lt;/p&gt;&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/modeler-step1.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Double-click on the Start Event. A text box opens. Type &amp;ldquo;Loan Request Received&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Modeling a BPMN 2.0 Process</title>
      <link>/7docs/7docs/get-started/archive/javaee7/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/javaee7/model/</guid>
      <description>&lt;p&gt;In this section we model our sample process with the Camunda Modeler.&lt;/p&gt;&#xA;&lt;h1 id=&#34;create-a-new-bpmn-20-diagram&#34;&gt;Create a new BPMN 2.0 Diagram&lt;/h1&gt;&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/modeler-new-bpmn-diagram.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Open Camunda Modeler and create a new BPMN diagram by Clicking &lt;em&gt;File &amp;gt; New File &amp;gt; BPMN Diagram&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;create-the-sample-pizza-order-process&#34;&gt;Create the Sample Pizza Order Process&lt;/h2&gt;&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/pizza-order-process.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;The sample process models a pizza order approval. In the first service task, the order should be persisted to our database. The next step is the approval of the order by a user. Based on his decision, the pizza will be prepared or a rejection email is sent.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Modeling a BPMN 2.0 Process</title>
      <link>/7docs/7docs/get-started/spring-boot/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/spring-boot/model/</guid>
      <description>&lt;p&gt;In this section we learn how to deploy a process and invoke a Spring Bean from a BPMN 2.0 Service Task.&lt;/p&gt;&#xA;&lt;h1 id=&#34;deploy-and-invoke-bpmn-process&#34;&gt;Deploy and Invoke BPMN Process&lt;/h1&gt;&#xA;&lt;p&gt;Now that we know how to bootstrap the process engine within a Spring Boot Application, we can add a BPMN 2.0 process&#xA;model and interact with the process from inside our Spring beans. In this section, we will&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Model an executable BPMN 2.0 process.&lt;/li&gt;&#xA;&lt;li&gt;Use Spring Boot Starter auto-deployment for BPMN 2.0 processes.&lt;/li&gt;&#xA;&lt;li&gt;Create a process application.&lt;/li&gt;&#xA;&lt;li&gt;Start a process instance from our process application.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;model-an-executable-bpmn-20-process-and-deploy-it&#34;&gt;Model an Executable BPMN 2.0 Process and Deploy It&lt;/h2&gt;&#xA;&lt;p&gt;Start by modeling an executable process using the Camunda Modeler. The process should look as depicted in the screenshot below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Orchestrating RPA Bots</title>
      <link>/7docs/7docs/get-started/archive/rpa/orchestrating-bots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/rpa/orchestrating-bots/</guid>
      <description>&lt;p&gt;After setting up all components in the &lt;a href=&#34;../installation&#34;&gt;Installation &amp;amp; Configuration&lt;/a&gt;, we will now dive into a concrete example of setting up RPA Orchestration. If your example is already up and running and you would like to dig deeper into &lt;a href=&#34;../error-handling&#34;&gt;Error Handling&lt;/a&gt;, go ahead.&lt;/p&gt;&#xA;&lt;h1 id=&#34;creating-and-deploying-a-bot&#34;&gt;Creating and deploying a Bot&lt;/h1&gt;&#xA;&lt;h2 id=&#34;uipath&#34;&gt;UiPath&lt;/h2&gt;&#xA;&lt;p&gt;To orchestrate your RPA bots and the tasks that they automate, you need to create a UiPath package that contains the scripts that the RPA bots should execute. In UiPath, these scripts are called &amp;ldquo;Process&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Add a User Task to the Process (4/6)</title>
      <link>/7docs/7docs/get-started/quick-start/user-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/quick-start/user-task/</guid>
      <description>&lt;p&gt;In this section, you&amp;rsquo;ll learn how to involve humans in your process by using BPMN 2.0 &lt;em&gt;User Tasks&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;add-a-user-task&#34;&gt;Add a User Task&lt;/h1&gt;&#xA;&lt;p&gt;We want to modify our process so that we can involve humans.&lt;/p&gt;&#xA;&lt;p&gt;To do so, open the process in the Camunda Modeler.&lt;/p&gt;&#xA;&lt;p&gt;Select the create/remove space tool (&amp;lt;||&amp;gt;) from the Modeler&amp;rsquo;s left-hand menu, and use it to create space between the Start Event and the &amp;ldquo;Charge Credit Card&amp;rdquo; Service Task (click and drag the cursor to the right).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploy and Test the BPMN 2.0 Process</title>
      <link>/7docs/7docs/get-started/archive/java-process-app/deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/java-process-app/deploy/</guid>
      <description>&lt;p&gt;The next step consists of building, deploying and testing the process.&lt;/p&gt;&#xA;&lt;h1 id=&#34;build-the-web-application-with-maven&#34;&gt;Build the Web Application with Maven&lt;/h1&gt;&#xA;&lt;p&gt;Select the &lt;code&gt;pom.xml&lt;/code&gt; in the Package Explorer, perform a right-click and select &lt;code&gt;Run As / Maven Install&lt;/code&gt;. This will generate a WAR file named &lt;code&gt;loan-approval-0.1.0-SNAPSHOT.war&lt;/code&gt; in the &lt;code&gt;target/&lt;/code&gt; folder of your Maven project.&lt;/p&gt;&#xA;&lt;p&gt;If you saved your bpmn file from the previous chapter in &lt;code&gt;src/main/resources&lt;/code&gt;, the war file includes the bpmn file, too.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploy the Java EE Process Application</title>
      <link>/7docs/7docs/get-started/archive/javaee7/deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/javaee7/deploy/</guid>
      <description>&lt;p&gt;The next step consists in building and deploying the process application.&lt;/p&gt;&#xA;&lt;h1 id=&#34;build-the-process-application&#34;&gt;Build the Process Application&lt;/h1&gt;&#xA;&lt;p&gt;To deploy the process application select the &lt;code&gt;pom.xml&lt;/code&gt; in the Package Explorer, perform a right-click and select &lt;code&gt;Run As / Maven Clean&lt;/code&gt; and afterwards &lt;code&gt;Run As / Maven Install&lt;/code&gt;. This will generate a WAR file named &lt;code&gt;pizza-order.war&lt;/code&gt; in the &lt;code&gt;target/&lt;/code&gt; folder of your Maven project.&lt;/p&gt;&#xA;&lt;p&gt;If the &lt;code&gt;pizza-order.war&lt;/code&gt; file is not visible after having performed the Maven build, you need to refresh the project (F5) in Eclipse.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Error Handling</title>
      <link>/7docs/7docs/get-started/archive/rpa/error-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/rpa/error-handling/</guid>
      <description>&lt;p&gt;Now that we can &lt;a href=&#34;../orchestrating-bots&#34;&gt;Orchestrate RPA Bots&lt;/a&gt; let&amp;rsquo;s have a look at how to react to a failing RPA bot or - generally speaking - how to handle the result of a bot as a BPMN error. Please note that the features presented here only work with a Camunda Platform 7.15 or later.&lt;/p&gt;&#xA;&lt;h1 id=&#34;scenarios&#34;&gt;Scenarios&lt;/h1&gt;&#xA;&lt;p&gt;As mentioned already, we can generally react to the result of an RPA bot execution by throwing a BPMN error. There are two main use cases for this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Evaluate, Deploy and Test the decision table</title>
      <link>/7docs/7docs/get-started/dmn/deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/dmn/deploy/</guid>
      <description>&lt;p&gt;In this step, we use Java Code to evaluate the decision table. Then we deploy the web application to Apache Tomcat and verify the result in Cockpit.&lt;/p&gt;&#xA;&lt;h1 id=&#34;evaluate-the-decision-table&#34;&gt;Evaluate the Decision Table&lt;/h1&gt;&#xA;&lt;p&gt;To directly evaluate the decision table after deployment, add the following method to your Application class:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; org.camunda.bpm.getstarted.dmn;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ProcessApplication&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dinner App DMN&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DinnerApplication&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; ServletProcessApplication {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Logger LOGGER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Logger.&lt;span style=&#34;color:#a6e22e&#34;&gt;getLogger&lt;/span&gt;(DinnerApplication.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@PostDeploy&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;evaluateDecisionTable&lt;/span&gt;(ProcessEngine processEngine) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DecisionService decisionService &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processEngine.&lt;span style=&#34;color:#a6e22e&#34;&gt;getDecisionService&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    VariableMap variables &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Variables.&lt;span style=&#34;color:#a6e22e&#34;&gt;createVariables&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#a6e22e&#34;&gt;putValue&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;season&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Spring&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#a6e22e&#34;&gt;putValue&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;guestCount&amp;#34;&lt;/span&gt;, 10);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DmnDecisionTableResult dishDecisionResult &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; decisionService.&lt;span style=&#34;color:#a6e22e&#34;&gt;evaluateDecisionTableByKey&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dish&amp;#34;&lt;/span&gt;, variables);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String desiredDish &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dishDecisionResult.&lt;span style=&#34;color:#a6e22e&#34;&gt;getSingleEntry&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LOGGER.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(Level.&lt;span style=&#34;color:#a6e22e&#34;&gt;INFO&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n\nDesired dish: {0}\n\n&amp;#34;&lt;/span&gt;, desiredDish);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;div class=&#34;panel-group gs-download-step-panel&#34; id=&#34;gitStep-4&#34;&gt;&#xA;  &lt;div class=&#34;panel panel-success&#34;&gt;&#xA;    &lt;div class=&#34;panel-heading&#34;&gt;&#xA;      &lt;div class=&#34;pull-right&#34;&gt;&#xA;        &lt;a class=&#34;btn btn-success gs-download-step-btn&#34; href=&#34;https://github.com/camunda/camunda-get-started-dmn/archive/Step-4.zip&#34;&gt;&#xA;          &lt;span i class=&#34;glyphicon glyphicon-download-alt&#34;&gt;&lt;/span&gt;&#xA;          Source Code Step-4&#xA;        &lt;/a&gt;&#xA;      &lt;/div&gt;&#xA;      &lt;h4&gt;Catch up: Get the Sources of Step-4.&lt;/h4&gt;&#xA;      &lt;p class=&#34;text-muted&#34;&gt;&#xA;        &lt;a href=&#34;https://github.com/camunda/camunda-get-started-dmn/archive/Step-4.zip&#34;&gt;Download as .zip&lt;/a&gt;&#xA;        or checkout the corresponding tag with &lt;a class=&#34;toggle-instructions&#34;&gt;Git&lt;/a&gt;.&#xA;      &lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Shared Process Engine</title>
      <link>/7docs/7docs/get-started/archive/spring/shared-process-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/spring/shared-process-engine/</guid>
      <description>&lt;p&gt;In the last section of this tutorial we learn how to use a shared process engine.&lt;/p&gt;&#xA;&lt;h1 id=&#34;alternative-configuration-using-shared-process-engine&#34;&gt;Alternative Configuration: Using Shared Process Engine&lt;/h1&gt;&#xA;&lt;p&gt;So far, we explored how to set up an embedded process engine inside a web application using the&#xA;Spring Framework. You can also use the Spring Framework to develop applications that use a shared&#xA;process engine. As opposed to the embedded process engine, the shared process engine is controlled&#xA;independently from an application and is started / stopped by the runtime container (like Apache&#xA;Tomcat). This allows multiple applications (or a single modular application) to use the same process&#xA;engine. You can also re-deploy individual applications independently from the process engine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Add Gateways to the Process (5/6)</title>
      <link>/7docs/7docs/get-started/quick-start/gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/quick-start/gateway/</guid>
      <description>&lt;p&gt;In this section, you&amp;rsquo;ll learn how to make your process more dynamic by using BPMN 2.0 &lt;em&gt;Exclusive Gateways&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;add-two-gateways&#34;&gt;Add Two Gateways&lt;/h1&gt;&#xA;&lt;p&gt;We want to modify our process so that it&amp;rsquo;s more dynamic.&lt;/p&gt;&#xA;&lt;p&gt;To do so, open the process in the Camunda Modeler.&lt;/p&gt;&#xA;&lt;p&gt;Next, from the Modeler&amp;rsquo;s left-hand menu, select the gateway shape (diamond) and drag it into position between the Start Event and the Service Task. Use the create space tool again as needed. Move the User Task down and add another Gateway after it. Lastly, adjust the Sequence Flows so that the model looks like this:&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/modeler-gateway1.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adding Start and Task Forms to a BPMN 2.0 Process</title>
      <link>/7docs/7docs/get-started/archive/java-process-app/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/java-process-app/forms/</guid>
      <description>&lt;p&gt;In the next step, we want to add a task form to the application.&lt;/p&gt;&#xA;&lt;h1 id=&#34;add-a-start-form&#34;&gt;Add a Start Form&lt;/h1&gt;&#xA;&lt;p&gt;Create a new form in Camunda Modeler and set its id to &lt;code&gt;request-loan&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Add a &lt;strong&gt;Text Field&lt;/strong&gt;, set the &lt;strong&gt;Field Label&lt;/strong&gt; to &lt;code&gt;Customer ID&lt;/code&gt; and the &lt;strong&gt;Key&lt;/strong&gt; to &lt;code&gt;customerId&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Add a &lt;strong&gt;Number Field&lt;/strong&gt;, set the &lt;strong&gt;Field Label&lt;/strong&gt; to &lt;code&gt;Amount&lt;/code&gt; and the &lt;strong&gt;Key&lt;/strong&gt; to &lt;code&gt;amount&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Save the form with the file name &lt;code&gt;request-loan.form&lt;/code&gt; to &lt;code&gt;src/main/resources&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Model, Evaluate and Deploy a Decision Requirements Graph</title>
      <link>/7docs/7docs/get-started/dmn/drg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/dmn/drg/</guid>
      <description>&lt;p&gt;In this step, we extend the previous example by a second decision &lt;em&gt;Beverages&lt;/em&gt; which uses the &lt;em&gt;Dish&lt;/em&gt; decision table as input. We model this dependency between the decisions within a Decision Requirements Graph (DRG) using the Camunda Modeler. Then, we adjust the Application class to evaluate the &lt;em&gt;Beverages&lt;/em&gt; decision, deploy the web application to Apache Tomcat and verify the result in Cockpit.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;note bg-info docs-info&#34;&gt;&#xA;  &lt;h3&gt;Decision Requirements Graph vs. Decision Requirements Diagram&lt;/h3&gt;&#xA;  &lt;p&gt;The visual representation of a Decision Requirements Graph (DRG) is called Decision Requirements Diagram (DRD). In the context of the Camunda Modeler, we name it DRD because we use the visual representation to model the DRG.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Start a BPMN Process using a JSF Form</title>
      <link>/7docs/7docs/get-started/archive/javaee7/start-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/javaee7/start-form/</guid>
      <description>&lt;p&gt;In this step, we add a start form and configure it in the BPMN 2.0 process, then, re-deploy the application and start the process from the Camunda Tasklist.&lt;/p&gt;&#xA;&lt;h1 id=&#34;add-a-start-form&#34;&gt;Add a Start Form&lt;/h1&gt;&#xA;&lt;p&gt;Go back to eclipse and add a file named &lt;code&gt;placeorder.xhtml&lt;/code&gt; to the &lt;code&gt;src/main/webapp&lt;/code&gt; folder. Add the following content:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.w3.org/1999/xhtml&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:ui&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://java.sun.com/jsf/facelets&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:h&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://java.sun.com/jsf/html&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:f&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://java.sun.com/jsf/core&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;f:view&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;f:metadata&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Start a new process instance. The Process Definition Key is read internally from&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;         request parameters and cached in the CDI conversation scope.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;f:event&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;preRenderView&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;listener&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#{camundaTaskForm.startProcessInstanceByKeyForm()}&amp;#34;&lt;/span&gt; /&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;f:metadata&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h:head&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;Place Order&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h:head&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h:body&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;Select your pizza&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h:form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submitForm&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h:panelGrid&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;columns&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pizza&amp;#34;&lt;/span&gt;&amp;gt;Pizza&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h:selectOneMenu&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pizza&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#{processVariables[&amp;#39;pizza&amp;#39;]}&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;f:selectItem&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;itemValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Margarita&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;itemLabel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Margarita&amp;#34;&lt;/span&gt;/&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;f:selectItem&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;itemValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Salami&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;itemLabel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Salami&amp;#34;&lt;/span&gt;/&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;f:selectItem&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;itemValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tonno&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;itemLabel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tonno&amp;#34;&lt;/span&gt;/&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;f:selectItem&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;itemValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Prosciutto&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;itemLabel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Prosciutto&amp;#34;&lt;/span&gt;/&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h:selectOneMenu&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;customer&amp;#34;&lt;/span&gt;&amp;gt;Customer&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- create process variables using the processVariables map. --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h:inputText&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;customer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#{processVariables[&amp;#39;customer&amp;#39;]}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;required&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; /&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;&amp;gt;Address&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;label&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- create process variables using the processVariables map. --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h:inputText&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#{processVariables[&amp;#39;address&amp;#39;]}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;required&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; /&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h:panelGrid&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- The button starts a new process instance. This ends the conversation and redirects us to the tasklist.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;           NOTE: Syntax is different when working on user task forms, see file &amp;#34;approveLoanRequest.xhtml&amp;#34;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;      --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h:commandButton&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit_button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Order Pizza&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#{camundaTaskForm.completeProcessInstanceForm()}&amp;#34;&lt;/span&gt; /&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h:messages&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color:red;margin:8px;&amp;#34;&lt;/span&gt; /&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h:form&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h:body&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;f:view&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The JSF view creates a simple input form for a customer name, address and a pizza selection. Additionally, an event listener is configured which is triggered before the view is rendered. It will call the &lt;code&gt;camundaTaskForm.startProcessInstanceByKeyForm()&lt;/code&gt; method which extracts the process definition key from the URL and starts a conversation for the start form.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Invoke an EJB from a BPMN 2.0 Service Task</title>
      <link>/7docs/7docs/get-started/archive/javaee7/service-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/javaee7/service-task/</guid>
      <description>&lt;p&gt;In this section we learn how to call an EJB from a BPMN 2.0 Service Task.&lt;/p&gt;&#xA;&lt;h1 id=&#34;add-ejb-service-task&#34;&gt;Add EJB Service Task&lt;/h1&gt;&#xA;&lt;p&gt;After the process has been started with the new order as process variables, we want to persist the order to the database and only save the newly generated order id as process variable.&lt;/p&gt;&#xA;&lt;h2 id=&#34;add-an-entity-bean-to-the-process-application&#34;&gt;Add an Entity Bean to the Process Application&lt;/h2&gt;&#xA;&lt;p&gt;To persist the entity with JPA, we add an entity bean to our process application. Create a package &lt;code&gt;org.camunda.bpm.getstarted.pizza&lt;/code&gt; and then place the following &lt;code&gt;OrderEntity&lt;/code&gt; class into that package:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Invoking a Java Class from a BPMN 2.0 Service Task</title>
      <link>/7docs/7docs/get-started/archive/java-process-app/service-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/java-process-app/service-task/</guid>
      <description>&lt;p&gt;In the last section of this tutorial we learn how to invoke a Java class from a BPMN 2.0 service task.&lt;/p&gt;&#xA;&lt;h1 id=&#34;add-a-service-task-to-the-process&#34;&gt;Add a Service Task to the Process&lt;/h1&gt;&#xA;&lt;p&gt;Use the Camunda Modeler to add a service task after the user task. To do so, select the activity shape (rectangle) and drag it onto a sequence flow (see screenshot). Name it &lt;em&gt;Process Request&lt;/em&gt;. Change the activity type to &lt;em&gt;Service Task&lt;/em&gt; by clicking on it and using the wrench button.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Leverage business rules (6/6)</title>
      <link>/7docs/7docs/get-started/quick-start/decision-automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/quick-start/decision-automation/</guid>
      <description>&lt;p&gt;In this section, you&amp;rsquo;ll learn how to add decision automation to your process by using &lt;a href=&#34;/7docs/7docs/get-started/manual/latest/reference/bpmn20/tasks/business-rule-task/&#34;&gt;BPMN 2.0 &lt;em&gt;Business Rule Tasks&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;/7docs/7docs/get-started/manual/latest/reference/dmn11/&#34;&gt;DMN 1.3 Decision Tables&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;add-a-business-rule-task-to-the-process&#34;&gt;Add a Business Rule Task to the Process&lt;/h1&gt;&#xA;&lt;p&gt;Use the Camunda Modeler to open the Payment Retrieval process then click on the Approve Payment Task. Change the activity type to &lt;em&gt;Business Rule Task&lt;/em&gt; in the wrench button menu.&lt;/p&gt;&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/modeler-businessrule-task1.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Next, link the Business Rule Task to a DMN table by changing &lt;code&gt;Implementation&lt;/code&gt; to &lt;code&gt;DMN&lt;/code&gt; and &lt;code&gt;Decision Ref&lt;/code&gt; to &lt;code&gt;approve-payment&lt;/code&gt; in the properties panel. In order to retrieve the result of the evaluation and save it automatically as a process instance variable in our process, we also need to change the &lt;code&gt;Result Variable&lt;/code&gt; to &lt;code&gt;approved&lt;/code&gt; and use &lt;code&gt;singleEntry&lt;/code&gt; as the &lt;code&gt;Map Decision Result&lt;/code&gt; in the properties panel.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Implement a JSF Task Form for a BPMN User Task.</title>
      <link>/7docs/7docs/get-started/archive/javaee7/task-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/javaee7/task-form/</guid>
      <description>&lt;p&gt;Now we add a task form and configure it in the BPMN 2.0 process, then, re-deploy the application and go to the Camunda Tasklist to see the JSF form.&lt;/p&gt;&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/approve-order.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;After the order has been persisted, a user can approve the order. For that, a task form is needed to display the order information and backend logic to fetch and update business objects.&lt;/p&gt;&#xA;&lt;h1 id=&#34;add-a-cdi-controller-bean&#34;&gt;Add a CDI Controller Bean&lt;/h1&gt;&#xA;&lt;p&gt;To update the persisted entity we use a named CDI Bean &lt;code&gt;ApproveOrderController&lt;/code&gt;. To gather the persisted order entity, we get the order id from the process variables of the &lt;code&gt;businessProcess&lt;/code&gt;. With the id we can load the order entity through the order business logic. After the order has been updated, the detached entity state is merged by the order business logic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Complete the BPMN 2.0 Process</title>
      <link>/7docs/7docs/get-started/archive/javaee7/complete-process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/archive/javaee7/complete-process/</guid>
      <description>&lt;p&gt;In the last section of this tutorial we learn how to complete the BPMN 2.0 Process.&lt;/p&gt;&#xA;&lt;h1 id=&#34;complete-the-process&#34;&gt;Complete the Process&lt;/h1&gt;&#xA;&lt;h2 id=&#34;add-prepare-pizza-task-form&#34;&gt;Add Prepare Pizza Task Form&lt;/h2&gt;&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/prepare-pizza.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;If the user approves the pizza order the pizza has to be prepared. So we add a user task form in which the user can confirm that preparation of the pizza has been completed.&lt;/p&gt;&#xA;&lt;p&gt;Go back to Eclipse and add a file named &lt;code&gt;preparepizza.xhtml&lt;/code&gt; to the &lt;code&gt;src/main/webapp&lt;/code&gt; folder. Add the following content:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Congratulation!</title>
      <link>/7docs/7docs/get-started/quick-start/complete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/quick-start/complete/</guid>
      <description>&lt;h1 id=&#34;your-first-process-instance-is-running-successfully&#34;&gt;Your first process instance is running successfully!&lt;/h1&gt;&#xA;&lt;p&gt;Now that you got the process running you may move on to step four to &lt;a href=&#34;/7docs/7docs/get-started/7docs/get-started/quick-start/user-task/&#34;&gt;learn how you can involve humans in your process&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/niall-says-congrats.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Feel free to remove the &lt;code&gt;Desktop.getDesktop().browse()&lt;/code&gt; line if you don&amp;rsquo;t want to open this page again.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Congratulation!</title>
      <link>/7docs/7docs/get-started/quick-start/success/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/7docs/7docs/get-started/quick-start/success/</guid>
      <description>&lt;h1 id=&#34;your-first-process-instance-is-running-successfully&#34;&gt;Your first process instance is running successfully!&lt;/h1&gt;&#xA;&lt;p&gt;Now that you got the process running you may move on to step four to &lt;a href=&#34;/7docs/7docs/get-started/7docs/get-started/quick-start/user-task/&#34;&gt;learn how you can involve humans in your process&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;figure class=&#34;image&#34;&gt;&#xA;  &lt;span&gt;&lt;img&#xA;      src=&#34;../img/niall-says-congrats.png&#34;&#xA;       /&gt;&lt;/span&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Feel free to remove the &lt;code&gt;open()&lt;/code&gt; line if you don&amp;rsquo;t want to open this page again.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
